<?xml version="1.0" encoding="UTF-8"?>
<modification>
<id><![CDATA[Email Button - Order Info]]></id>
<version><![CDATA[OC v.1.5.6.5 Merkent]]></version>
<vqmver><![CDATA[2.6.1]]></vqmver>
<author><![CDATA[JuceMobile.com - IP_CAM]]></author>
<email><![CDATA[webmaster@opencart.li]]></email>
<link><![CDATA[http://www.opencart.li]]></link>

<file name="catalog/view/theme/*/template/account/order_info.tpl">
<operation error="log">
<search position="before"><![CDATA[<div class="col-sm-12 col-md-4">]]></search>
<add><![CDATA[
<div style="text-align:center"><a class="btn btn-info" href="javascript:window.location=window.location.href.replace('info','resend');" title="mail Invoice" /><span>Resend eMail</span></a> 
&nbsp; <a class="btn btn-info" onclick="window.print();return false;" title="print Invoice" class="button">Print Invoice</a></div><hr />
]]></add>
</operation>
</file>

<file name="catalog/controller/account/order.php">
<operation error="log">
<search position="before"><![CDATA[public function info() {]]></search>
<add><![CDATA[public function resend(){
if (!$this->customer->isLogged()) {
$this->session->data['redirect'] = $this->url->link('account/account', '', 'SSL');
$this->redirect($this->url->link('account/login', '', 'SSL'));
} 

$this->load->model('checkout/order');
$order_id   = $this->request->get['order_id'];
$order_info = $this->model_checkout_order->getOrder($order_id);


if($this->customer->getEmail() !== $order_info['email']){
$this->session->data['success'] = "No order was found with that ID for your account!";
$this->redirect($this->url->link('account/account', '', 'SSL'));
}

$template = new Template();

$order_product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$order_id . "'");

foreach ($order_product_query->rows as $order_product) {
$this->db->query("UPDATE " . DB_PREFIX . "product SET quantity = (quantity - " . (int)$order_product['quantity'] . ") WHERE product_id = '" . (int)$order_product['product_id'] . "' AND subtract = '1'");

$order_option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$order_id . "' AND order_product_id = '" . (int)$order_product['order_product_id'] . "'");

foreach ($order_option_query->rows as $option) {
$this->db->query("UPDATE " . DB_PREFIX . "product_option_value SET quantity = (quantity - " . (int)$order_product['quantity'] . ") WHERE product_option_value_id = '" . (int)$option['product_option_value_id'] . "' AND subtract = '1'");
}
}

$this->cache->delete('product');

// Downloads
$order_download_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_download WHERE order_id = '" . (int)$order_id . "'");

// Gift Voucher
$this->load->model('checkout/voucher');

$order_voucher_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_voucher WHERE order_id = '" . (int)$order_id . "'");

foreach ($order_voucher_query->rows as $order_voucher) {
$voucher_id = $this->model_checkout_voucher->addVoucher($order_id, $order_voucher);

$this->db->query("UPDATE " . DB_PREFIX . "order_voucher SET voucher_id = '" . (int)$voucher_id . "' WHERE order_voucher_id = '" . (int)$order_voucher['order_voucher_id'] . "'");
}

// Order Totals
$order_total_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_total` WHERE order_id = '" . (int)$order_id . "' ORDER BY sort_order ASC");

foreach ($order_total_query->rows as $order_total) {
$this->load->model('total/' . $order_total['code']);

if (method_exists($this->{'model_total_' . $order_total['code']}, 'confirm')) {
$this->{'model_total_' . $order_total['code']}->confirm($order_info, $order_total);
}
}

// Order Totals
$order_total_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "order_total` WHERE order_id = '" . (int)$order_id . "' ORDER BY sort_order ASC");

foreach ($order_total_query->rows as $order_total) {
$this->load->model('total/' . $order_total['code']);

if (method_exists($this->{'model_total_' . $order_total['code']}, 'confirm')) {
$this->{'model_total_' . $order_total['code']}->confirm($order_info, $order_total);
}
}

// Send out order confirmation mail
$language = new Language($order_info['language_directory']);
$language->load($order_info['language_filename']);
$language->load('mail/order');


// HTML Mail
$template = new Template();
$subject = sprintf($language->get('text_new_subject'), $order_info['store_name'], $order_id);

$template->data['title'] = sprintf($language->get('text_new_subject'), html_entity_decode($order_info['store_name'], ENT_QUOTES, 'UTF-8'), $order_id);
$template->data['text_greeting'] = "";
$template->data['text_link'] = $language->get('text_new_link');
$template->data['text_download'] = $language->get('text_new_download');
$template->data['text_order_detail'] = $language->get('text_new_order_detail');
$template->data['text_instruction'] = $language->get('text_new_instruction');
$template->data['text_order_id'] = $language->get('text_new_order_id');
$template->data['text_date_added'] = $language->get('text_new_date_added');
$template->data['text_payment_method'] = $language->get('text_new_payment_method');
$template->data['text_shipping_method'] = $language->get('text_new_shipping_method');
$template->data['text_email'] = $language->get('text_new_email');
$template->data['text_telephone'] = $language->get('text_new_telephone');
$template->data['text_ip'] = $language->get('text_new_ip');
$template->data['text_payment_address'] = $language->get('text_new_payment_address');
$template->data['text_shipping_address'] = $language->get('text_new_shipping_address');
$template->data['text_product'] = $language->get('text_new_product');
$template->data['text_model'] = $language->get('text_new_model');
$template->data['text_quantity'] = $language->get('text_new_quantity');
$template->data['text_price'] = $language->get('text_new_price');
$template->data['text_total'] = $language->get('text_new_total');
$template->data['text_footer'] = "";
$template->data['text_powered'] = $language->get('text_new_powered');
$template->data['logo'] = $this->config->get('config_url') . 'image/' . $this->config->get('config_logo');
$template->data['store_name'] = $order_info['store_name'];
$template->data['store_url'] = $order_info['store_url'];
$template->data['customer_id'] = $order_info['customer_id'];
$template->data['link'] = $order_info['store_url'] . 'index.php?route=account/order/info&order_id=' . $order_id;
$template->data['text_order_status'] = $language->get('text_order_status');
$template->data['order_status'] = $language->get('order_status');

if ($order_download_query->num_rows) {
$template->data['download'] = $order_info['store_url'] . 'index.php?route=account/download';
} else {
$template->data['download'] = '';
}

// Vouchers
$template->data['vouchers'] = array();

foreach ($order_voucher_query->rows as $voucher) {
$template->data['vouchers'][] = array(
'description' => $voucher['description'],
'amount'      => $this->currency->format($voucher['amount'], $order_info['currency_code'], $order_info['currency_value']),
);
}

$template->data['order_id'] = $order_id;
$template->data['date_added'] = date($language->get('date_format_short'), strtotime($order_info['date_added']));
$template->data['payment_method'] = $order_info['payment_method'];
$template->data['shipping_method'] = $order_info['shipping_method'];
$template->data['email'] = $order_info['email'];
$template->data['telephone'] = $order_info['telephone'];
$template->data['ip'] = $order_info['ip'];
$template->data['comment'] = '';

if ($order_info['payment_address_format']) {
$format = $order_info['payment_address_format'];
} else {
$format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{address_1}' . "\n" . '{address_2}' . "\n" . '{city} {postcode}' . "\n" . '{zone}' . "\n" . '{country}';
}

$find = array(
'{firstname}',
'{lastname}',
'{company}',
'{address_1}',
'{address_2}',
'{city}',
'{postcode}',
'{zone}',
'{zone_code}',
'{country}'
);

$replace = array(
'firstname' => $order_info['payment_firstname'],
'lastname'  => $order_info['payment_lastname'],
'company'   => $order_info['payment_company'],
'address_1' => $order_info['payment_address_1'],
'address_2' => $order_info['payment_address_2'],
'city'      => $order_info['payment_city'],
'postcode'  => $order_info['payment_postcode'],
'zone'      => $order_info['payment_zone'],
'zone_code' => $order_info['payment_zone_code'],
'country'   => $order_info['payment_country']  
);

$template->data['payment_address'] = str_replace(array("\r\n", "\r", "\n"), '<br />', preg_replace(array("/\s\s+/", "/\r\r+/", "/\n\n+/"), '<br />', trim(str_replace($find, $replace, $format))));

if ($order_info['shipping_address_format']) {
$format = $order_info['shipping_address_format'];
} else {
$format = '{firstname} {lastname}' . "\n" . '{company}' . "\n" . '{address_1}' . "\n" . '{address_2}' . "\n" . '{city} {postcode}' . "\n" . '{zone}' . "\n" . '{country}';
}

$find = array(
'{firstname}',
'{lastname}',
'{company}',
'{address_1}',
'{address_2}',
'{city}',
'{postcode}',
'{zone}',
'{zone_code}',
'{country}'
);

$replace = array(
'firstname' => $order_info['shipping_firstname'],
'lastname'  => $order_info['shipping_lastname'],
'company'   => $order_info['shipping_company'],
'address_1' => $order_info['shipping_address_1'],
'address_2' => $order_info['shipping_address_2'],
'city'      => $order_info['shipping_city'],
'postcode'  => $order_info['shipping_postcode'],
'zone'      => $order_info['shipping_zone'],
'zone_code' => $order_info['shipping_zone_code'],
'country'   => $order_info['shipping_country']  
);

$template->data['shipping_address'] = str_replace(array("\r\n", "\r", "\n"), '<br />', preg_replace(array("/\s\s+/", "/\r\r+/", "/\n\n+/"), '<br />', trim(str_replace($find, $replace, $format))));

// Products
$template->data['products'] = array();

foreach ($order_product_query->rows as $product) {
$option_data = array();

$order_option_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_option WHERE order_id = '" . (int)$order_id . "' AND order_product_id = '" . (int)$product['order_product_id'] . "'");

foreach ($order_option_query->rows as $option) {
if ($option['type'] != 'file') {
$value = $option['value'];
} else {
$value = utf8_substr($option['value'], 0, utf8_strrpos($option['value'], '.'));
}

$option_data[] = array(
'name'  => $option['name'],
'value' => (utf8_strlen($value) > 20 ? utf8_substr($value, 0, 20) . '..' : $value)
);
}
  
$template->data['products'][] = array(
'name'     => $product['name'],
'model'    => $product['model'],
'option'   => $option_data,
'quantity' => $product['quantity'],
'price'    => $this->currency->format($product['price'] + ($this->config->get('config_tax') ? $product['tax'] : 0), $order_info['currency_code'], $order_info['currency_value']),
'total'    => $this->currency->format($product['total'] + ($this->config->get('config_tax') ? ($product['tax'] * $product['quantity']) : 0), $order_info['currency_code'], $order_info['currency_value'])
);
}
$template->data['totals'] = $order_total_query->rows;

if (file_exists(DIR_TEMPLATE . $this->config->get('config_template') . '/template/mail/order.tpl')) {
$html = $template->fetch($this->config->get('config_template') . '/template/mail/order.tpl');
} else {
$html = $template->fetch('default/template/mail/order.tpl');
}

$mail = new Mail(); 
$mail->protocol = $this->config->get('config_mail_protocol');
$mail->parameter = $this->config->get('config_mail_parameter');
$mail->hostname = $this->config->get('config_smtp_host');
$mail->username = $this->config->get('config_smtp_username');
$mail->password = $this->config->get('config_smtp_password');
$mail->port = $this->config->get('config_smtp_port');
$mail->timeout = $this->config->get('config_smtp_timeout');
$mail->setTo($order_info['email']);
$mail->setFrom($this->config->get('config_email'));
$mail->setSender($order_info['store_name']);
$mail->setSubject(html_entity_decode($subject, ENT_QUOTES, 'UTF-8'));
$mail->setHtml($html);
$mail->send();

$this->session->data['success'] = "Order receipt was emailed to: ".$this->customer->getEmail()."!";

$this->redirect($this->url->link('account/account', '', 'SSL'));
}
]]></add>
</operation>
</file>

</modification>